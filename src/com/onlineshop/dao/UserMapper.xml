<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--注意：在mapper代理时，它具有特殊及重要的作用-->
<!-- namespace：命名空间，用于隔离sql -->
<!-- 还有一个很重要的作用，使用动态代理开发DAO，1. namespace必须和Mapper接口类路径一致 -->
<mapper namespace="com.onlineshop.dao.UserMapper">
    <!-- 根据用户ID查询用户信息-->
    <!-- select：表示一个MappingStatement对象-->
    <!-- id：statement的唯一标识-->
    <!-- #{}：表示一个占位符？-->
    <!-- #{id}：里面的id表示输入参数的参数名称，如果该参数是简单类型，那么#{}里面的参数名称可以任意-->
    <!-- parameterType：输入参数的java类型-->
    <!-- resultType：输出结果的所映射的java类型（单条结果所对应的的java类型）-->
    <select id="findUserName" parameterType="String" resultType="int">
        SELECT count(*) FROM user WHERE username =#{username}
    </select>
    <select id="findUserPhone" parameterType="String" resultType="int">
        SELECT count(*) FROM user WHERE phone =#{phone}
    </select>
    <!-- 新增用户 -->
    <insert id="insertUser" parameterType="com.onlineshop.po.User">
        <!-- selectKey 标签实现主键返回 -->
        <!-- keyColumn:主键对应的表中的哪一列 -->
        <!-- keyProperty：主键对应的pojo中的哪一个属性 -->
        <!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql -->
        <!-- resultType：设置返回的id的类型 -->
        <selectKey keyColumn="id" keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO `user`
        (username,phone,password,signature,hobby,address) VALUES (#{username},#{phone},#{password},#{signature},#{hobby},#{address})
    </insert>
    <!-- 用户查询（登陆） -->
    <select id="findUser" parameterType="com.onlineshop.po.User" resultType="int">
        SELECT count(*) FROM user WHERE username = #{username} and password = #{password}
    </select>
    <!-- 找回密码（查询是否存在） -->
    <select id="findUserBack" parameterType="com.onlineshop.po.User" resultType="int">
        SELECT count(*) FROM user WHERE username = #{username} and phone = #{phone}
    </select>
    <!-- 用户信息 -->
    <select id="findUserByName" parameterType="String" resultType="com.onlineshop.po.User">
        SELECT * from user where username = #{username}
    </select>
    <!--修改用户信息-->
    <update id="UpdateUserMsg" parameterType="com.onlineshop.po.User">
        Update `user` SET signature = #{signature},hobby = #{hobby},address = #{address} WHERE id = #{id}
    </update>
    <!--修改用户密码-->
    <update id="UpdateUserPsw" parameterType="com.onlineshop.po.User">
        Update `user` SET password = #{password} WHERE id = #{id}
    </update>

    <!--管理端-->
    <!--登陆-->
    <select id="FindAdmin" parameterType="com.onlineshop.po.Admin" resultType="int">
        SELECT count(*) FROM admin where username = #{username} and password = #{password}
    </select>
    <!--显示用户（包括模糊查询）-->
    <select id="DisAllUser" parameterType="com.onlineshop.po.Pageresult" resultType="com.onlineshop.po.User">
        SELECT * FROM user limit #{start},#{pageCount}
    </select>
    <select id="DisSearchUser" parameterType="com.onlineshop.po.Pageresult" resultType="com.onlineshop.po.User">
        SELECT * FROM user where username like concat('%',#{username},'%') limit #{start},#{pageCount}
    </select>
    <select id="CountAllUser" resultType="int">
        SELECT count(*) FROM user
    </select>
    <select id="CountSearchUser" parameterType="String" resultType="int">
        SELECT count(*) FROM user where username like concat('%',#{username},'%')
    </select>
</mapper>